// üìÅ utils/categoriasUtils.js - Utilidades para manejo de categor√≠as

// üî• MAPEO REAL DE CATEGOR√çAS (basado en tu sistema)
export const CATEGORY_NAMES = {
  'mixgold': 'ü•á Mixto Gold',
  'mixsilv': 'ü•à Mixto Silver', 
  'vargold': 'ü•á Varonil Gold',
  'varsilv': 'ü•à Varonil Silver',
  'femgold': 'ü•á Femenil Gold',
  'femsilv': 'ü•à Femenil Silver',
  'varmast': 'üëë Varonil Master',
  'femmast': 'üëë Femenil Master',
  'tocho7v7': '‚ö° Tocho 7v7',
  // Agregar otros posibles valores que uses
  'mixta': 'üèà Mixta',
  'femenil': 'üë© Femenil',
  'varonil': 'üë® Varonil',
  'libre': 'üÜì Libre'
};

// üî• COLORES POR CATEGOR√çA
export const CATEGORY_COLORS = {
  'mixgold': '#ffd700',
  'mixsilv': '#c0c0c0',
  'vargold': '#4CAF50',
  'varsilv': '#81C784',
  'femgold': '#E91E63',
  'femsilv': '#F06292',
  'varmast': '#FF9800',
  'femmast': '#FF7043',
  'tocho7v7': '#9C27B0',
  // Colores para categor√≠as adicionales
  'mixta': '#2196F3',
  'femenil': '#E91E63',
  'varonil': '#4CAF50',
  'libre': '#9E9E9E'
};

// üî• ICONOS POR CATEGOR√çA
export const CATEGORY_ICONS = {
  'mixgold': 'üëë',
  'mixsilv': '‚≠ê',
  'vargold': 'üèÜ',
  'varsilv': 'ü•à',
  'femgold': 'üíé',
  'femsilv': '‚ú®',
  'varmast': 'üî•',
  'femmast': 'üí´',
  'tocho7v7': '‚ö°',
  // Iconos para categor√≠as adicionales
  'mixta': 'üèà',
  'femenil': 'üë©',
  'varonil': 'üë®',
  'libre': 'üÜì'
};

// üî• FUNCI√ìN: Obtener nombre formateado de categor√≠a
export const obtenerNombreCategoria = (codigo) => {
  if (!codigo) return 'Sin categor√≠a';
  return CATEGORY_NAMES[codigo] || codigo.toUpperCase();
};

// üî• FUNCI√ìN: Obtener color de categor√≠a
export const obtenerColorCategoria = (codigo) => {
  if (!codigo) return '#64b5f6';
  return CATEGORY_COLORS[codigo] || '#64b5f6';
};

// üî• FUNCI√ìN: Obtener icono de categor√≠a
export const obtenerIconoCategoria = (codigo) => {
  if (!codigo) return 'üèà';
  return CATEGORY_ICONS[codigo] || 'üèà';
};

// üî• FUNCI√ìN: Validar si una categor√≠a es v√°lida
export const esCategoriaValida = (codigo) => {
  return Object.keys(CATEGORY_NAMES).includes(codigo);
};

// üî• FUNCI√ìN: Obtener todas las categor√≠as como array
export const obtenerTodasCategorias = () => {
  return Object.entries(CATEGORY_NAMES).map(([codigo, nombre]) => ({
    codigo,
    nombre,
    color: CATEGORY_COLORS[codigo],
    icono: CATEGORY_ICONS[codigo]
  }));
};

// üî• FUNCI√ìN: Agrupar categor√≠as por tipo
export const agruparCategoriasPorTipo = () => {
  return {
    mixto: [
      { codigo: 'mixgold', nombre: CATEGORY_NAMES.mixgold },
      { codigo: 'mixsilv', nombre: CATEGORY_NAMES.mixsilv },
      { codigo: 'mixta', nombre: CATEGORY_NAMES.mixta }
    ],
    varonil: [
      { codigo: 'vargold', nombre: CATEGORY_NAMES.vargold },
      { codigo: 'varsilv', nombre: CATEGORY_NAMES.varsilv },
      { codigo: 'varmast', nombre: CATEGORY_NAMES.varmast },
      { codigo: 'varonil', nombre: CATEGORY_NAMES.varonil }
    ],
    femenil: [
      { codigo: 'femgold', nombre: CATEGORY_NAMES.femgold },
      { codigo: 'femsilv', nombre: CATEGORY_NAMES.femsilv },
      { codigo: 'femmast', nombre: CATEGORY_NAMES.femmast },
      { codigo: 'femenil', nombre: CATEGORY_NAMES.femenil }
    ],
    especial: [
      { codigo: 'tocho7v7', nombre: CATEGORY_NAMES.tocho7v7 },
      { codigo: 'libre', nombre: CATEGORY_NAMES.libre }
    ]
  };
};

// üî• FUNCI√ìN: Obtener categor√≠as disponibles basado en un torneo
export const obtenerCategoriasDisponibles = (torneo) => {
  if (!torneo?.categorias) return [];
  
  return torneo.categorias
    .filter(cat => esCategoriaValida(cat))
    .map(codigo => ({
      codigo,
      nombre: obtenerNombreCategoria(codigo),
      color: obtenerColorCategoria(codigo),
      icono: obtenerIconoCategoria(codigo)
    }));
};

// üî• FUNCI√ìN: Debug - Mostrar categor√≠as no reconocidas
export const debugCategoriaNoReconocida = (codigo) => {
  if (!esCategoriaValida(codigo)) {
    console.warn(`‚ö†Ô∏è Categor√≠a no reconocida: "${codigo}". Agregar a CATEGORY_NAMES si es v√°lida.`);
  }
};