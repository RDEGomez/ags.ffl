// üìÅ utils/categoriasUtils.js - Utilidades para manejo de categor√≠as

// üî• MAPEO REAL DE CATEGOR√çAS (basado en tu sistema)
export const CATEGORY_NAMES = {
  'mixgold': 'ü•á Mixto Gold',
  'mixsilv': 'ü•à Mixto Silver', 
  'vargold': 'ü•á Varonil Gold',
  'varsilv': 'ü•à Varonil Silver',
  'femgold': 'ü•á Femenil Gold',
  'femsilv': 'ü•à Femenil Silver',
  'varmast': 'üëë Varonil Master',
  'femmast': 'üëë Femenil Master',
  'tocho7v7': '‚ö° Tocho 7v7',
  'u8': 'üë∂ U-8',
  'u10': 'üë¶ U-10',
  'u12fem': 'üëß U-12 Femenil',
  'u12var': 'üë¶ U-12 Varonil',
  'u14fem': 'üëß U-14 Femenil',
  'u14var': 'üë¶ U-14 Varonil',
  'u16fem': 'üëß U-16 Femenil',
  'u16var': 'üë¶ U-16 Varonil',
  'u18fem': 'üëß U-18 Femenil',
  'u18var': 'üë¶ U-18 Varonil'
};

// üî• COLORES POR CATEGOR√çA
export const CATEGORY_COLORS = {
  'mixgold': '#ffd700',
  'mixsilv': '#c0c0c0',
  'vargold': '#4CAF50',
  'varsilv': '#81C784',
  'femgold': '#E91E63',
  'femsilv': '#F06292',
  'varmast': '#FF9800',
  'femmast': '#FF7043',
  'tocho7v7': '#9C27B0',
  'u8': '#64B5F6',
  'u10': '#42A5F5',
  'u12fem': '#AB47BC',
  'u12var': '#7E57C2',
  'u14fem': '#5C6BC0',
  'u14var': '#42A5F5',
  'u16fem': '#29B6F6',
  'u16var': '#26C6DA',
  'u18fem': '#26A69A',
  'u18var': '#66BB6A'
};

// üî• ICONOS POR CATEGOR√çA
export const CATEGORY_ICONS = {
  'mixgold': 'üëë',
  'mixsilv': '‚≠ê',
  'vargold': 'üèÜ',
  'varsilv': 'ü•à',
  'femgold': 'üíé',
  'femsilv': '‚ú®',
  'varmast': 'üî•',
  'femmast': 'üí´',
  'tocho7v7': '‚ö°',
  'u8': 'üë∂',
  'u10': 'üë¶',
  'u12fem': 'üëß',
  'u12var': 'üë¶',
  'u14fem': 'üëß',
  'u14var': 'üë¶',
  'u16fem': 'üëß',
  'u16var': 'üë¶',
  'u18fem': 'üëß',
  'u18var': 'üë¶'
};

// üî• FUNCI√ìN: Obtener nombre formateado de categor√≠a
export const obtenerNombreCategoria = (codigo) => {
  if (!codigo) return 'Sin categor√≠a';
  return CATEGORY_NAMES[codigo] || codigo.toUpperCase();
};

// üî• FUNCI√ìN: Obtener color de categor√≠a
export const obtenerColorCategoria = (codigo) => {
  if (!codigo) return '#64b5f6';
  return CATEGORY_COLORS[codigo] || '#64b5f6';
};

// üî• FUNCI√ìN: Obtener icono de categor√≠a
export const obtenerIconoCategoria = (codigo) => {
  if (!codigo) return 'üèà';
  return CATEGORY_ICONS[codigo] || 'üèà';
};

// üî• FUNCI√ìN: Validar si una categor√≠a es v√°lida
export const esCategoriaValida = (codigo) => {
  return Object.keys(CATEGORY_NAMES).includes(codigo);
};

// üî• FUNCI√ìN: Obtener todas las categor√≠as como array
export const obtenerTodasCategorias = () => {
  return Object.entries(CATEGORY_NAMES).map(([codigo, nombre]) => ({
    codigo,
    nombre,
    color: CATEGORY_COLORS[codigo],
    icono: CATEGORY_ICONS[codigo]
  }));
};

// üî• FUNCI√ìN: Agrupar categor√≠as por tipo
export const agruparCategoriasPorTipo = () => {
  return {
    mixto: [
      { codigo: 'mixgold', nombre: CATEGORY_NAMES.mixgold },
      { codigo: 'mixsilv', nombre: CATEGORY_NAMES.mixsilv },
      { codigo: 'mixta', nombre: CATEGORY_NAMES.mixta }
    ],
    varonil: [
      { codigo: 'vargold', nombre: CATEGORY_NAMES.vargold },
      { codigo: 'varsilv', nombre: CATEGORY_NAMES.varsilv },
      { codigo: 'varmast', nombre: CATEGORY_NAMES.varmast },
      { codigo: 'varonil', nombre: CATEGORY_NAMES.varonil }
    ],
    femenil: [
      { codigo: 'femgold', nombre: CATEGORY_NAMES.femgold },
      { codigo: 'femsilv', nombre: CATEGORY_NAMES.femsilv },
      { codigo: 'femmast', nombre: CATEGORY_NAMES.femmast },
      { codigo: 'femenil', nombre: CATEGORY_NAMES.femenil }
    ],
    especial: [
      { codigo: 'tocho7v7', nombre: CATEGORY_NAMES.tocho7v7 }
    ],
    infantil: [
      { codigo: 'u8', nombre: CATEGORY_NAMES.u8 },
      { codigo: 'u10', nombre: CATEGORY_NAMES.u10 },
      { codigo: 'u12fem', nombre: CATEGORY_NAMES.u12fem },
      { codigo: 'u12var', nombre: CATEGORY_NAMES.u12var },
      { codigo: 'u14fem', nombre: CATEGORY_NAMES.u14fem },
      { codigo: 'u14var', nombre: CATEGORY_NAMES.u14var },
      { codigo: 'u16fem', nombre: CATEGORY_NAMES.u16fem },
      { codigo: 'u16var', nombre: CATEGORY_NAMES.u16var },
      { codigo: 'u18fem', nombre: CATEGORY_NAMES.u18fem },
      { codigo: 'u18var', nombre: CATEGORY_NAMES.u18var }
    ]
  };
};

// üî• FUNCI√ìN: Obtener categor√≠as disponibles basado en un torneo
export const obtenerCategoriasDisponibles = (torneo) => {
  if (!torneo?.categorias) return [];
  
  return torneo.categorias
    .filter(cat => esCategoriaValida(cat))
    .map(codigo => ({
      codigo,
      nombre: obtenerNombreCategoria(codigo),
      color: obtenerColorCategoria(codigo),
      icono: obtenerIconoCategoria(codigo)
    }));
};

// üî• FUNCI√ìN: Debug - Mostrar categor√≠as no reconocidas
export const debugCategoriaNoReconocida = (codigo) => {
  if (!esCategoriaValida(codigo)) {
    console.warn(`‚ö†Ô∏è Categor√≠a no reconocida: "${codigo}". Agregar a CATEGORY_NAMES si es v√°lida.`);
  }
};