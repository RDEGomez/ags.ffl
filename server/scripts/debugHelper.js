// scripts/debugHelper.js - Diagnosticar el helper de ImageKit
const fs = require('fs');
const path = require('path');

function diagnosticarHelper() {
  console.log('üîç DIAGN√ìSTICO DEL HELPER IMAGEKIT');
  console.log('=' * 50);
  
  const helperPath = path.join(process.cwd(), 'server', 'src', 'helpers', 'uploadImageKit.js');
  
  console.log('üìÅ Ruta esperada:', helperPath);
  console.log('üìÇ ¬øArchivo existe?', fs.existsSync(helperPath));
  
  if (fs.existsSync(helperPath)) {
    try {
      const contenido = fs.readFileSync(helperPath, 'utf8');
      
      console.log('\nüìä AN√ÅLISIS DEL CONTENIDO:');
      console.log('üìè Tama√±o del archivo:', contenido.length, 'caracteres');
      
      // Verificar palabras clave que el script busca
      const palabrasClave = [
        'ImageKit',
        'transformation',
        'upload',
        'testImageKitConnection',
        'logImageKitResult'
      ];
      
      console.log('\nüîç PALABRAS CLAVE ENCONTRADAS:');
      palabrasClave.forEach(palabra => {
        const encontrada = contenido.includes(palabra);
        console.log(`   ${encontrada ? '‚úÖ' : '‚ùå'} ${palabra}: ${encontrada ? 'S√ç' : 'NO'}`);
      });
      
      // Verificar exports
      console.log('\nüì§ EXPORTS VERIFICADOS:');
      const exportsEsperados = [
        'module.exports',
        'upload',
        'logImageKitResult',
        'testImageKitConnection'
      ];
      
      exportsEsperados.forEach(exp => {
        const encontrado = contenido.includes(exp);
        console.log(`   ${encontrado ? '‚úÖ' : '‚ùå'} ${exp}: ${encontrado ? 'S√ç' : 'NO'}`);
      });
      
      // Mostrar primeras y √∫ltimas l√≠neas
      const lineas = contenido.split('\n');
      console.log('\nüìã PRIMERAS 3 L√çNEAS:');
      lineas.slice(0, 3).forEach((linea, i) => {
        console.log(`   ${i + 1}: ${linea}`);
      });
      
      console.log('\nüìã √öLTIMAS 3 L√çNEAS:');
      const ultimasLineas = lineas.slice(-3);
      ultimasLineas.forEach((linea, i) => {
        console.log(`   ${lineas.length - 3 + i + 1}: ${linea}`);
      });
      
      // Intentar requerir el m√≥dulo
      console.log('\nüîß PRUEBA DE REQUIRE:');
      try {
        delete require.cache[helperPath]; // Limpiar cache
        const helper = require(helperPath);
        
        console.log('‚úÖ Helper se puede requerir exitosamente');
        console.log('üìã Exports disponibles:', Object.keys(helper));
        
        // Verificar funciones espec√≠ficas
        const funcionesEsperadas = ['upload', 'logImageKitResult', 'testImageKitConnection'];
        funcionesEsperadas.forEach(func => {
          const existe = typeof helper[func] === 'function';
          console.log(`   ${existe ? '‚úÖ' : '‚ùå'} ${func}: ${existe ? 'funci√≥n' : 'no encontrada'}`);
        });
        
      } catch (requireError) {
        console.error('‚ùå Error al requerir el helper:', requireError.message);
        console.log('üîß Esto podr√≠a ser el problema. Revisar sintaxis del archivo.');
      }
      
    } catch (readError) {
      console.error('‚ùå Error leyendo el archivo:', readError.message);
    }
  } else {
    console.log('‚ùå El archivo no existe en la ruta esperada');
    console.log('\nüí° SOLUCIONES:');
    console.log('   1. Verificar que la ruta sea correcta');
    console.log('   2. Crear el archivo manualmente');
    console.log('   3. Verificar permisos de archivo');
  }
  
  // Verificar estructura de directorios
  console.log('\nüìÇ ESTRUCTURA DE DIRECTORIOS:');
  const serverDir = path.join(process.cwd(), 'server');
  const srcDir = path.join(serverDir, 'src');
  const helpersDir = path.join(srcDir, 'helpers');
  
  console.log(`   server/: ${fs.existsSync(serverDir) ? '‚úÖ' : '‚ùå'}`);
  console.log(`   server/src/: ${fs.existsSync(srcDir) ? '‚úÖ' : '‚ùå'}`);
  console.log(`   server/src/helpers/: ${fs.existsSync(helpersDir) ? '‚úÖ' : '‚ùå'}`);
  
  if (fs.existsSync(helpersDir)) {
    const archivos = fs.readdirSync(helpersDir);
    console.log('   üìÅ Archivos en helpers/:');
    archivos.forEach(archivo => {
      console.log(`      - ${archivo}`);
    });
  }
}

// Ejecutar diagn√≥stico
if (require.main === module) {
  diagnosticarHelper();
}

module.exports = { diagnosticarHelper };