// üèà Script para simular partidos finalizados con jugadas realistas
// Ejecutar desde la ra√≠z del proyecto: node scripts/simular_partidos_finalizados.js

const mongoose = require('mongoose');
require('dotenv').config();

// Importar modelos
const Partido = require('../src/models/Partido');
const Usuario = require('../src/models/Usuario');
const Equipo = require('../src/models/Equipo');
const Torneo = require('../src/models/Torneo'); // üî• AGREGAR ESTA L√çNEA

// üîß CONFIGURACI√ìN
const CONFIG = {
  // Filtros para seleccionar partidos
  TORNEO_NOMBRE: 'Torneo Apertura 2025',
  ESTADOS_PROCESAR: ['programado'], // Solo procesar partidos programados
  
  // Configuraci√≥n de jugadas
  JUGADAS_POR_PARTIDO: {
    min: 15,    // M√≠nimo 15 jugadas por partido
    max: 25     // M√°ximo 25 jugadas por partido
  },
  
  // Configuraci√≥n de marcadores (para que ronden los 20 puntos)
  PUNTOS_OBJETIVO: {
    min: 12,    // M√≠nimo 12 puntos por equipo
    max: 28     // M√°ximo 28 puntos por equipo
  },
  
  // Tipos de jugadas con sus probabilidades y caracter√≠sticas
  TIPOS_JUGADAS: {
    // Jugadas ofensivas
    'pase_completo': { 
      prob: 35, 
      puntos: 0, 
      touchdown_prob: 15,  // 15% probabilidad de TD
      esOfensiva: true
    },
    'pase_incompleto': { 
      prob: 20, 
      puntos: 0, 
      esOfensiva: true
    },
    'corrida': { 
      prob: 25, 
      puntos: 0, 
      touchdown_prob: 10,  // 10% probabilidad de TD
      esOfensiva: true
    },
    
    // Jugadas defensivas
    'intercepcion': { 
      prob: 8, 
      puntos: 0, 
      touchdown_prob: 20,  // 20% probabilidad de pick-six
      esOfensiva: false    // La ejecuta el equipo DEFENSOR
    },
    'sack': { 
      prob: 7, 
      puntos: 0, 
      esOfensiva: false    // La ejecuta el equipo DEFENSOR
    },
    'tackleo': { 
      prob: 5, 
      puntos: 0, 
      esOfensiva: false    // La ejecuta el equipo DEFENSOR
    }
  },
  
  // Conversiones despu√©s de TD
  CONVERSIONES: {
    '1pt': { prob: 70 },   // 70% intentan 1 punto
    '2pt': { prob: 30 }    // 30% intentan 2 puntos
  },
  
  // Configuraci√≥n de tiempo
  DURACION_PARTIDO: 50,   // 50 minutos
  PERIODOS: 2             // 2 tiempos
};

// üéØ FUNCI√ìN PRINCIPAL
async function simularPartidosFinalizados() {
  try {
    console.log('üèà INICIO - Simulador de Partidos Finalizados');
    console.log('================================================');
    
    // 1. Conectar a la base de datos
    await conectarDB();
    
    // 2. Obtener partidos programados
    const partidos = await obtenerPartidosProgramados();
    
    if (partidos.length === 0) {
      console.log('‚ö†Ô∏è No hay partidos programados para simular');
      return;
    }
    
    console.log(`üéØ Procesando ${partidos.length} partidos programados...\n`);
    
    let partidosSimulados = 0;
    let totalJugadas = 0;
    
    // 3. Simular cada partido
    for (const partido of partidos) {
      console.log(`‚öΩ Simulando: ${partido.equipoLocal.nombre} vs ${partido.equipoVisitante.nombre}`);
      
      try {
        const jugadasCreadas = await simularPartido(partido);
        partidosSimulados++;
        totalJugadas += jugadasCreadas;
        
        console.log(`  ‚úÖ ${jugadasCreadas} jugadas creadas`);
      } catch (error) {
        console.error(`  ‚ùå Error simulando partido ${partido._id}:`, error.message);
      }
      
      // Pausa peque√±a para evitar sobrecarga
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    // 4. Resumen final
    console.log('\nüéâ ¬°SIMULACI√ìN COMPLETADA!');
    console.log('============================');
    console.log(`üìä Partidos simulados: ${partidosSimulados}/${partidos.length}`);
    console.log(`‚öΩ Total de jugadas creadas: ${totalJugadas}`);
    console.log(`üìà Promedio de jugadas por partido: ${Math.round(totalJugadas / partidosSimulados)}`);
    
    // 5. Mostrar algunos resultados
    await mostrarResultadosEjemplo();
    
  } catch (error) {
    console.error('‚ùå ERROR en la simulaci√≥n:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüëã Desconectado de la base de datos');
  }
}

// üîå CONECTAR A LA BASE DE DATOS
async function conectarDB() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Conectado a la base de datos MongoDB');
  } catch (error) {
    console.error('‚ùå Error conectando a la base de datos:', error);
    throw error;
  }
}

// üìã OBTENER PARTIDOS PROGRAMADOS
async function obtenerPartidosProgramados() {
  console.log('\nüîç Buscando partidos programados...');
  
  const filtro = {
    estado: { $in: CONFIG.ESTADOS_PROCESAR }
  };
  
  // Si se especifica un torneo, filtrar por √©l
  if (CONFIG.TORNEO_NOMBRE) {
    const torneo = await Torneo.findOne({ nombre: CONFIG.TORNEO_NOMBRE });
    if (torneo) {
      filtro.torneo = torneo._id;
      console.log(`üîç Filtrando por torneo: ${CONFIG.TORNEO_NOMBRE} (ID: ${torneo._id})`);
    } else {
      console.log(`‚ö†Ô∏è Torneo "${CONFIG.TORNEO_NOMBRE}" no encontrado, procesando todos los partidos`);
    }
  }
  
  const partidos = await Partido.find(filtro)
    .populate('equipoLocal', 'nombre categoria')
    .populate('equipoVisitante', 'nombre categoria')
    .populate('torneo', 'nombre')
    .sort({ fechaHora: 1 });
  
  console.log(`‚úÖ Encontrados ${partidos.length} partidos para simular`);
  
  return partidos;
}

// üèà SIMULAR UN PARTIDO COMPLETO
async function simularPartido(partido) {
  // 1. Obtener jugadores de ambos equipos
  const jugadoresLocal = await obtenerJugadoresEquipo(partido.equipoLocal._id);
  const jugadoresVisitante = await obtenerJugadoresEquipo(partido.equipoVisitante._id);
  
  if (jugadoresLocal.length === 0 || jugadoresVisitante.length === 0) {
    throw new Error('Uno o ambos equipos no tienen jugadores registrados');
  }
  
  // 2. Generar marcador objetivo (alrededor de 20 puntos cada uno, sin empates)
  const { puntosLocal, puntosVisitante } = generarMarcadorObjetivo();
  
  // 3. Generar jugadas para alcanzar el marcador
  const jugadas = await generarJugadasPartido(
    partido,
    jugadoresLocal,
    jugadoresVisitante,
    puntosLocal,
    puntosVisitante
  );
  
  // 4. Actualizar el partido
  await actualizarPartidoFinalizado(partido, jugadas, puntosLocal, puntosVisitante);
  
  return jugadas.length;
}

// üë• OBTENER JUGADORES DE UN EQUIPO
async function obtenerJugadoresEquipo(equipoId) {
  const jugadores = await Usuario.find({
    'equipos.equipo': equipoId,
    'rol': 'jugador'
  }).select('nombre equipos');
  
  // Extraer n√∫meros de jugador
  return jugadores.map(jugador => {
    const equipoData = jugador.equipos.find(e => e.equipo.toString() === equipoId.toString());
    return {
      id: jugador._id,
      nombre: jugador.nombre,
      numero: equipoData ? equipoData.numero : null
    };
  }).filter(j => j.numero !== null); // Solo jugadores con n√∫mero
}

// üéØ GENERAR MARCADOR OBJETIVO (SIN EMPATES)
function generarMarcadorObjetivo() {
  const puntosLocal = Math.floor(Math.random() * (CONFIG.PUNTOS_OBJETIVO.max - CONFIG.PUNTOS_OBJETIVO.min + 1)) + CONFIG.PUNTOS_OBJETIVO.min;
  let puntosVisitante = Math.floor(Math.random() * (CONFIG.PUNTOS_OBJETIVO.max - CONFIG.PUNTOS_OBJETIVO.min + 1)) + CONFIG.PUNTOS_OBJETIVO.min;
  
  // Evitar empates
  while (puntosVisitante === puntosLocal) {
    puntosVisitante = Math.floor(Math.random() * (CONFIG.PUNTOS_OBJETIVO.max - CONFIG.PUNTOS_OBJETIVO.min + 1)) + CONFIG.PUNTOS_OBJETIVO.min;
  }
  
  return { puntosLocal, puntosVisitante };
}

// üéÆ GENERAR JUGADAS DEL PARTIDO
async function generarJugadasPartido(partido, jugadoresLocal, jugadoresVisitante, puntosObjetivoLocal, puntosObjetivoVisitante) {
  const jugadas = [];
  let puntosLocal = 0;
  let puntosVisitante = 0;
  let posesionLocal = Math.random() > 0.5; // Determinar qui√©n inicia
  
  // Generar n√∫mero de jugadas
  const totalJugadas = Math.floor(Math.random() * (CONFIG.JUGADAS_POR_PARTIDO.max - CONFIG.JUGADAS_POR_PARTIDO.min + 1)) + CONFIG.JUGADAS_POR_PARTIDO.min;
  
  for (let i = 0; i < totalJugadas; i++) {
    // Determinar tiempo de la jugada
    const tiempo = generarTiempoJugada(i, totalJugadas);
    
    // Determinar tipo de jugada
    const tipoJugada = seleccionarTipoJugada();
    const configJugada = CONFIG.TIPOS_JUGADAS[tipoJugada];
    
    // Determinar equipo en posesi√≥n y equipo defensor
    const equipoEnPosesion = posesionLocal ? partido.equipoLocal._id : partido.equipoVisitante._id;
    const jugadoresEnPosesion = posesionLocal ? jugadoresLocal : jugadoresVisitante;
    const jugadoresDefensores = posesionLocal ? jugadoresVisitante : jugadoresLocal;
    
    // Seleccionar jugadores seg√∫n el tipo de jugada
    let jugadorPrincipal, jugadorSecundario;
    
    if (configJugada.esOfensiva) {
      // Jugada ofensiva: jugadores del equipo en posesi√≥n
      jugadorPrincipal = seleccionarJugadorAleatorio(jugadoresEnPosesion);
      if (['pase_completo'].includes(tipoJugada)) {
        jugadorSecundario = seleccionarJugadorAleatorio(jugadoresEnPosesion, jugadorPrincipal.id);
      }
    } else {
      // Jugada defensiva: jugador principal del equipo DEFENSOR
      jugadorPrincipal = seleccionarJugadorAleatorio(jugadoresDefensores);
      if (['intercepcion'].includes(tipoJugada)) {
        // El jugador secundario es del equipo ofensivo (el QB que lanz√≥ el pase interceptado)
        jugadorSecundario = seleccionarJugadorAleatorio(jugadoresEnPosesion);
      }
    }
    
    // Determinar si es touchdown
    const esTouchdown = Math.random() * 100 < (configJugada.touchdown_prob || 0);
    let puntosJugada = esTouchdown ? 6 : 0;
    
    // Crear jugada
    const jugada = {
      numero: i + 1,
      tiempo: tiempo,
      equipoEnPosesion: equipoEnPosesion,
      tipoJugada: tipoJugada,
      descripcion: generarDescripcionJugada(tipoJugada, jugadorPrincipal, jugadorSecundario, esTouchdown),
      jugadorPrincipal: jugadorPrincipal.id,
      jugadorSecundario: jugadorSecundario ? jugadorSecundario.id : undefined,
      resultado: {
        touchdown: esTouchdown,
        intercepcion: tipoJugada === 'intercepcion',
        sack: tipoJugada === 'sack',
        puntos: puntosJugada
      }
    };
    
    jugadas.push(jugada);
    
    // Actualizar marcador
    if (puntosJugada > 0) {
      if (configJugada.esOfensiva || tipoJugada === 'intercepcion') {
        // Puntos para el equipo en posesi√≥n (ofensiva) o el equipo defensor (pick-six)
        const equipoQueAnota = (tipoJugada === 'intercepcion') ? !posesionLocal : posesionLocal;
        if (equipoQueAnota) {
          puntosLocal += puntosJugada;
        } else {
          puntosVisitante += puntosJugada;
        }
      }
    }
    
    // Generar conversi√≥n despu√©s de touchdown
    if (esTouchdown) {
      const conversion = generarConversion(posesionLocal ? jugadoresLocal : jugadoresVisitante, equipoEnPosesion);
      if (conversion) {
        jugadas.push(conversion);
        
        // Actualizar marcador con conversi√≥n
        const equipoQueAnota = (tipoJugada === 'intercepcion') ? !posesionLocal : posesionLocal;
        if (equipoQueAnota) {
          puntosLocal += conversion.resultado.puntos;
        } else {
          puntosVisitante += conversion.resultado.puntos;
        }
      }
    }
    
    // Cambiar posesi√≥n en ciertas jugadas
    if (['intercepcion', 'touchdown'].includes(tipoJugada)) {
      posesionLocal = !posesionLocal;
    }
    
    // Cambiar posesi√≥n ocasionalmente (simulando downs)
    if (Math.random() < 0.3) { // 30% probabilidad de cambio de posesi√≥n
      posesionLocal = !posesionLocal;
    }
  }
  
  return jugadas;
}

// ‚è∞ GENERAR TIEMPO DE JUGADA
function generarTiempoJugada(indiceJugada, totalJugadas) {
  // Distribuir jugadas a lo largo del partido (50 minutos, 2 periodos)
  const tiempoTranscurrido = (indiceJugada / totalJugadas) * CONFIG.DURACION_PARTIDO;
  const periodo = tiempoTranscurrido < (CONFIG.DURACION_PARTIDO / 2) ? 1 : 2;
  const minutoEnPeriodo = Math.floor(tiempoTranscurrido % (CONFIG.DURACION_PARTIDO / 2));
  const segundo = Math.floor(Math.random() * 60);
  
  return {
    minuto: minutoEnPeriodo,
    segundo: segundo,
    periodo: periodo
  };
}

// üé≤ SELECCIONAR TIPO DE JUGADA
function seleccionarTipoJugada() {
  const tipos = Object.keys(CONFIG.TIPOS_JUGADAS);
  const probabilidades = Object.values(CONFIG.TIPOS_JUGADAS).map(t => t.prob);
  
  const total = probabilidades.reduce((sum, prob) => sum + prob, 0);
  const random = Math.random() * total;
  
  let acumulado = 0;
  for (let i = 0; i < tipos.length; i++) {
    acumulado += probabilidades[i];
    if (random <= acumulado) {
      return tipos[i];
    }
  }
  
  return tipos[0]; // Fallback
}

// üë§ SELECCIONAR JUGADOR ALEATORIO
function seleccionarJugadorAleatorio(jugadores, excluirId = null) {
  const jugadoresDisponibles = jugadores.filter(j => j.id.toString() !== excluirId?.toString());
  return jugadoresDisponibles[Math.floor(Math.random() * jugadoresDisponibles.length)];
}

// üìù GENERAR DESCRIPCI√ìN DE JUGADA
function generarDescripcionJugada(tipo, jugadorPrincipal, jugadorSecundario, esTouchdown) {
  const descripciones = {
    'pase_completo': [
      `Pase completo de #${jugadorPrincipal.numero} a #${jugadorSecundario?.numero}`,
      `Conexi√≥n exitosa entre #${jugadorPrincipal.numero} y #${jugadorSecundario?.numero}`,
      `Pase de ${Math.floor(Math.random() * 20) + 5} yardas completado`
    ],
    'pase_incompleto': [
      `Pase incompleto de #${jugadorPrincipal.numero}`,
      `Pase cerrado, no encontr√≥ al receptor`,
      `Pase alto, imposible de atrapar`
    ],
    'corrida': [
      `Corrida de #${jugadorPrincipal.numero} por ${Math.floor(Math.random() * 15) + 3} yardas`,
      `Acarreo efectivo de #${jugadorPrincipal.numero}`,
      `Corrida por el centro del campo`
    ],
    'intercepcion': [
      `¬°Intercepci√≥n de #${jugadorPrincipal.numero}!`,
      `#${jugadorPrincipal.numero} roba el bal√≥n en el aire`,
      `Gran lectura defensiva de #${jugadorPrincipal.numero}`
    ],
    'sack': [
      `¬°Sack de #${jugadorPrincipal.numero}!`,
      `#${jugadorPrincipal.numero} derriba al QB`,
      `Captura por p√©rdida de yardas`
    ],
    'tackleo': [
      `Tackleo s√≥lido de #${jugadorPrincipal.numero}`,
      `#${jugadorPrincipal.numero} detiene el avance`,
      `Tackleo efectivo en la l√≠nea de scrimmage`
    ]
  };
  
  let descripcion = descripciones[tipo][Math.floor(Math.random() * descripciones[tipo].length)];
  
  if (esTouchdown) {
    descripcion += ' - ¬°TOUCHDOWN!';
  }
  
  return descripcion;
}

// üèÜ GENERAR CONVERSI√ìN DESPU√âS DE TD
function generarConversion(jugadores, equipoEnPosesion) {
  const intentaConversion = Math.random() < 0.9; // 90% intenta conversi√≥n
  if (!intentaConversion) return null;
  
  const es2Puntos = Math.random() < (CONFIG.CONVERSIONES['2pt'].prob / 100);
  const tipoConversion = es2Puntos ? 'conversion_2pt' : 'conversion_1pt';
  const puntosConversion = es2Puntos ? 2 : 1;
  
  // Probabilidad de √©xito
  const exitoso = Math.random() < (es2Puntos ? 0.4 : 0.8); // 2pt: 40%, 1pt: 80%
  
  const jugadorPateador = seleccionarJugadorAleatorio(jugadores);
  
  return {
    numero: 999, // Se ajustar√° en el guardado
    tiempo: { minuto: 0, segundo: 0, periodo: 1 }, // Se ajustar√°
    equipoEnPosesion: equipoEnPosesion,
    tipoJugada: tipoConversion,
    descripcion: `${exitoso ? 'Exitosa' : 'Fallida'} conversi√≥n de ${puntosConversion} punto${puntosConversion > 1 ? 's' : ''}`,
    jugadorPrincipal: jugadorPateador.id,
    resultado: {
      touchdown: false,
      intercepcion: false,
      sack: false,
      puntos: exitoso ? puntosConversion : 0
    }
  };
}

// üíæ ACTUALIZAR PARTIDO FINALIZADO
async function actualizarPartidoFinalizado(partido, jugadas, puntosLocal, puntosVisitante) {
  // Ajustar n√∫meros de jugada
  jugadas.forEach((jugada, index) => {
    jugada.numero = index + 1;
  });
  
  // Determinar ganador
  const ganador = puntosLocal > puntosVisitante ? partido.equipoLocal._id : partido.equipoVisitante._id;
  const diferenciaPuntos = Math.abs(puntosLocal - puntosVisitante);
  
  // Actualizar el partido
  await Partido.findByIdAndUpdate(partido._id, {
    $set: {
      estado: 'finalizado',
      'marcador.local': puntosLocal,
      'marcador.visitante': puntosVisitante,
      'resultado.ganador': ganador,
      'resultado.empate': false,
      'resultado.diferenciaPuntos': diferenciaPuntos,
      'resultado.tipoVictoria': 'normal',
      'tiempoJuego.tiempoFinalizacion': new Date(),
      jugadas: jugadas
    }
  });
  
  console.log(`    üìä Marcador final: ${puntosLocal} - ${puntosVisitante}`);
}

// üìä MOSTRAR RESULTADOS DE EJEMPLO
async function mostrarResultadosEjemplo() {
  console.log('\nüìã Ejemplos de partidos simulados:');
  console.log('===================================');
  
  const partidosEjemplo = await Partido.find({ 
    estado: 'finalizado',
    'jugadas.0': { $exists: true }
  })
  .populate('equipoLocal', 'nombre')
  .populate('equipoVisitante', 'nombre')
  .sort({ 'tiempoJuego.tiempoFinalizacion': -1 })
  .limit(5);
  
  partidosEjemplo.forEach((partido, index) => {
    console.log(`${index + 1}. ${partido.equipoLocal.nombre} ${partido.marcador.local} - ${partido.marcador.visitante} ${partido.equipoVisitante.nombre}`);
    console.log(`   Jugadas: ${partido.jugadas.length} | Categor√≠a: ${partido.categoria}`);
    console.log('');
  });
}

// üöÄ EJECUTAR SCRIPT
if (require.main === module) {
  simularPartidosFinalizados();
}

module.exports = {
  simularPartidosFinalizados
};

/*
üìñ INSTRUCCIONES DE USO:

1. Guardar este archivo como: scripts/simular_partidos_finalizados.js

2. Configurar variables en CONFIG seg√∫n necesites:
   - TORNEO_NOMBRE: Nombre del torneo a procesar
   - PUNTOS_OBJETIVO: Rango de puntos por equipo (alrededor de 20)
   - JUGADAS_POR_PARTIDO: Cantidad de jugadas por partido

3. Ejecutar desde la ra√≠z del proyecto:
   node scripts/simular_partidos_finalizados.js

4. El script:
   ‚úÖ Busca partidos en estado 'programado'
   ‚úÖ Obtiene jugadores reales de cada equipo
   ‚úÖ Genera jugadas realistas con probabilidades
   ‚úÖ Maneja jugadas defensivas correctamente
   ‚úÖ Crea marcadores sin empates (alrededor de 20 puntos)
   ‚úÖ Marca partidos como 'finalizado'

5. Tipos de jugadas generadas:
   üèà Ofensivas: pase_completo, pase_incompleto, corrida
   üõ°Ô∏è Defensivas: intercepcion, sack, tackleo
   üèÜ Especiales: conversion_1pt, conversion_2pt

6. Caracter√≠sticas realistas:
   ‚úÖ Probabilidades basadas en flag football real
   ‚úÖ Jugadas defensivas asignadas al equipo defensor
   ‚úÖ Conversiones despu√©s de touchdowns
   ‚úÖ Descripciones autom√°ticas de jugadas
   ‚úÖ Distribuci√≥n temporal a lo largo del partido

‚ö†Ô∏è  IMPORTANTE:
- Requiere que los equipos tengan jugadores registrados
- Solo procesa partidos en estado 'programado'
- Los marcadores rondan los 20 puntos sin empates
- Las jugadas defensivas se asignan correctamente al equipo defensor
*/